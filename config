#!/usr/bin/env bash

BASE_DIR=$(dirname $0)

git_config() {
    echo "Configuring git..."

    echo "User..."
    if [[ "$GIT_USER_NAME" ]]; then
        git config --global user.name "$GIT_USER_NAME"
    fi

    if [[ "$GIT_USER_EMAIL" ]]; then
        git config --global user.email "$GIT_USER_EMAIL"
    fi

    echo "Core..."
    git config --global core.editor vim
    git config --global core.excludesfile ${HOME}/.gitignore

    echo "Branch..."
    git config --global branch.autosetuprebase always

    echo "Color..."
    git config --global color.branch auto
    git config --global color.decorate auto
    git config --global color.diff auto
    git config --global color.grep auto
    git config --global color.interactive auto
    git config --global color.log auto
    git config --global color.showbranch auto
    git config --global color.status auto
    git config --global color.ui auto

    echo "Diff..."
    git config --global diff.algorithm patience
    git config --global diff.autoRefreshIndex true
    git config --global diff.indentHeuristic true
    git config --global diff.mnemonicprefix true
    git config --global diff.renames true

    echo "Fetch..."
    git config --global fetch.recurseSubmodules true

    echo "Grep..."
    git config --global grep.extendedRegexp true

    echo "Merge..."
    git config --global merge.ff true
    git config --global merge.conflictstyle diff3
    git config --global merge.verbosity 3

    echo "Pull..."
    git config --global pull.ff only

    echo "Push..."
    git config --global push.default simple

    echo "Alias..."
    git config --global alias.br branch
    git config --global alias.ci 'commit -a --verbose'
    git config --global alias.co checkout
    git config --global alias.cob 'checkout -b'

#    git config --global alias.ghpr '"!f() { \
#        // https://medium.com/@vitalyb/creating-powerful-git-aliases-3dfc0efc9a31 \
#        trap "echo ERROR: Operation failed; return" ERR; \
#        [ -z \"$1\" ] && echo "PR number required" && exit 1; \
#        git fetch upstream pull/$1/head:github_pr_$1; \
#        git co github_pr_$1; \
#        }; f"'

    git config --global alias.lg 'log --stat --color'

    git config --global alias.up 'pull --all --ff-only'
    git config --global alias.upr '!git remote update -p; git merge --ff-only @{u}'

    git config --global alias.st st 'status -s -uno'

#    git config --global alias.tidy '"!f(){ git remote prune upstream && git gc --aggressive; }; f"'
#
#    git config --global alias.pub  '"!f() { git push -u ${1:-origin} `git symbolic-ref HEAD`; }; f"'
#    git config --global alias.pushup '!git push origin $(git rev-parse --abbrev-ref HEAD)'

}

# Config install and uninstall script
if [[ "install" == $1 ]]; then
    echo "Installing dot configuration files"
    cp -frv ${BASE_DIR}/sbt ${HOME}/.sbt
    cp -frv ${BASE_DIR}/subversion ${HOME}/.subversion
    cp -frv ${BASE_DIR}/vim ${HOME}/.vim
    cp -frv ${BASE_DIR}/dot ${HOME}/.dot
    cp -v ${BASE_DIR}/bashrc ${HOME}/.bashrc
    cp -v ${BASE_DIR}/gitignore ${HOME}/.gitignore
    cp -v ${BASE_DIR}/tmux.conf ${HOME}/.tmux.conf
    cp -v ${BASE_DIR}/vimrc ${HOME}/.vimrc
    cp -v ${BASE_DIR}/zshrc ${HOME}/.zshrc

    #echo "Installing Antigen"
    rm -fr ${HOME}/.antigen
    git clone https://github.com/zsh-users/antigen.git ${HOME}/.antigen

    echo "Installing Vundle"
    rm -fr ${HOME}/.vim/bundle/Vundle.vim
    git clone https://github.com/gmarik/Vundle.vim.git ${HOME}/.vim/bundle/Vundle.vim

    git_config
elif [[ "uninstall" == $1 ]]; then
    echo "Uninstalling dot configuration files"
    rm -fr ${HOME}/.sbt
    rm -fr ${HOME}/.subversion
    rm -fr ${HOME}/.vim
    rm -fr ${HOME}/.dot
    rm ${HOME}/.bashrc
    rm ${HOME}/.gitignore
    rm ${HOME}/.tmux.conf
    rm ${HOME}/.vimrc
    rm ${HOME}/.zshrc

    echo "Uninstalling Antigen"
    rm -fr ${HOME}/.antigen

    echo "Uninstalling Vundle"
    rm -fr ${HOME}/.vim/bundle/Vundle.vim
elif [[ "git" == $1 ]]; then
    git_config
else
    echo "Usage: config install/uninstall"
fi
